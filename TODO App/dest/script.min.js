"use strict";!function(){function n({tagName:t="div",classes:e=[],attributes:s={},textContent:a=""}){var i;if("string"!=typeof t)return console.warn("tagName createElement method of App must be a string"),(i=document.createElement("div")).textContent="tagName must be a string",i;let r=document.createElement(t);return"string"==typeof a?r.textContent=a:console.warn("textContent must be a string"),Array.isArray(e)&&e.forEach(t=>{"string"==typeof t?r.classList.add(t):console.warn("classes must be a string")}),"object"==typeof s&&s&&Object.entries(s).forEach(t=>{"string"==typeof t[0]&&"string"==typeof t[1]?r.setAttribute(t[0],t[1]):console.warn("Element's attributes must be a string")}),r}class r{constructor(){this.cardsArr=[],this._body=document.body,this._init()}_init(){this._createApp(),this._getCards(),this._attachEvents()}_attachEvents(){this.formButton.addEventListener("click",this._formAction.bind(this)),this._cardsBlock.addEventListener("click",t=>{switch(t.target){case this._sortButtonImportant:this._changeButtonTextContent(this._sortButtonImportant),this._sortCardsReverseImportant();break;case this._sortButtonDone:this._changeButtonTextContent(this._sortButtonDone),this._sortCardsReverseDone();break;case this._sortButtonDefault:this._changeButtonTextContent(this._sortButtonDefault),this._sortCardsReverseDefault()}})}_createApp(){var t=n({classes:["container"]}),e=n({classes:["container","form-container"]}),s=n({tagName:"h1",textContent:"Awesome TODO App"}),a=(this.formButton=n({tagName:"button",classes:["btn","btn-primary"],textContent:"Create card",attributes:{"data-role":"create"}}),this._cardsBlock=n({classes:["container","cards-block"]}),this._nameField=n({tagName:"input",classes:["form-control"],attributes:{placeholder:"Name"},autocomplete:"autocomplete"}),this._descriptionField=n({tagName:"textarea",classes:["form-control"],attributes:{placeholder:"Description",autocomplete:"autocomplete"}}),this._importantBlock=n({classes:["container","important-container"]}),this._completedBlock=n({classes:["container","completed-container"]}),this._defaultBlock=n({classes:["container","default-container"]}),n({tagName:"h2",textContent:"Prioritized Tasks"})),i=n({tagName:"h2",textContent:"Completed Tasks"}),r=n({tagName:"h2",textContent:"Unprioritized Tasks"});this._sortButtonImportant=n({tagName:"button",classes:["btn","btn-primary","btn-sort"],textContent:"A - Z"}),this._sortButtonDone=n({tagName:"button",classes:["btn","btn-primary","btn-sort"],textContent:"A - Z"}),this._sortButtonDefault=n({tagName:"button",classes:["btn","btn-primary","btn-sort"],textContent:"A - Z"}),this._importantBlock.append(a,this._sortButtonImportant),this._defaultBlock.append(r,this._sortButtonDefault),this._completedBlock.append(i,this._sortButtonDone),this._cardsBlock.append(this._importantBlock,this._defaultBlock,this._completedBlock),e.append(s,this._nameField,this._descriptionField,this.formButton),t.append(e,this._cardsBlock),this._body.append(t)}_getCards(){let e;this._request({callback:t=>{e=JSON.parse(t.data),this.cardsArr=e.map(t=>new s({cardTitle:t.title,cardText:t.text,isImportance:t.importance,isDone:t.done,id:t.id})),this._insertCards(),this._sortCards()}})}_insertCards(){this.importantArr=[],this.doneArr=[],this.defaultArr=[],this.cardsArr.forEach(t=>{(t.element.classList.contains("card--importance")?this.importantArr:t.element.classList.contains("card--done")?this.doneArr:this.defaultArr).push(t)}),this._sortCards()}_changeButtonTextContent(t){"A - Z"===t.textContent?t.textContent="Z - A":t.textContent="A - Z"}_sortCards(){this.importantArr.sort((t,e)=>t.title>e.title?1:-1),this.importantArr.forEach(t=>{this._importantBlock.append(t.element)}),this.doneArr.sort((t,e)=>t.title>e.title?1:-1),this.doneArr.forEach(t=>{this._completedBlock.append(t.element)}),this.defaultArr.sort((t,e)=>t.title>e.title?1:-1),this.defaultArr.forEach(t=>{this._defaultBlock.append(t.element)})}_sortCardsReverseImportant(){"undefined"!==this.importantArr||0<this.importantArr.length?(this.importantArr.reverse(),this.importantArr.forEach(t=>{this._importantBlock.append(t.element)})):console.warn("You don't have cards to sort in this category")}_sortCardsReverseDone(){"undefined"!==this.importantArr||0<this.importantArr.length?(this.doneArr.reverse(),this.doneArr.forEach(t=>{this._completedBlock.append(t.element)})):console.warn("You don't have cards to sort in this category")}_sortCardsReverseDefault(){"undefined"!==this.importantArr||0<this.importantArr.length?(this.defaultArr.reverse(),this.defaultArr.forEach(t=>{this._defaultBlock.append(t.element)})):console.warn("You don't have cards to sort in this category")}_getFormData(){var t={};return t.cardTitle=this._nameField.value,t.cardText=this._descriptionField.value,t}_validateForm(){var t=[];return t.push(this._validateTextFields(this._nameField)),t.push(this._validateTextFields(this._descriptionField)),!t.some(t=>!1===t)}_checkExistingCard(){return this.cardData=this._getFormData(),this.cardsArr.some(t=>t.title===this.cardData.cardTitle)}_getCardsStates(t,e){var s={title:t.title,text:t.text,importance:t.isImportance,done:t.isDone};return e||(s.id=t.id),s}_request({method:t="GET",card:e,message:s="",callback:a}){var i={method:t};"GET"!==t&&(i.body=JSON.stringify(this._getCardsStates(e))),fetch(r.API_ENDPOINT,i).then(t=>t.json()).then(t=>{0===t.status?(a(t),s&&alert(s)):alert(t.errorText)}).catch(t=>{alert(t)})}_formAction(){if(this._validateForm()){if(this._checkExistingCard())if(!confirm(`You already have a card with current title.
                
Do you want to add one more?`))return;if("create"===this.formButton.dataset.role){let e=new s(this.cardData);this.cardsArr.push(e),this._request({method:"POST",card:e,isCreate:!0,message:"Card was created",callback:t=>{e.id=t.data.id,this._defaultBlock.append(e.element),this._resetForm(),this._restartApp()}})}else"update"===this.formButton.dataset.role&&(this.editableCard.title=this._nameField.value,this.editableCard.text=this._descriptionField.value,this._updateRequest(this.editableCard))}}_updateRequest(t){this._request({method:"PUT",card:t,isCreate:!1,message:"Card was updated",callback:()=>{t._updateCard(),this._resetForm(),this._restartApp()}})}_resetForm(){this._nameField.value="",this._descriptionField.value="",this.formButton.textContent="Create card",this.formButton.setAttribute("data-role","create")}_restartApp(){document.querySelector("body").innerHTML="",t._init()}_validateTextFields(t){return""===t.value?(t.classList.add("is-invalid"),!1):(t.classList.remove("is-invalid"),!0)}updateCard(t,e){e?this._updateRequest(t):(this._nameField.value=t.title,this._descriptionField.value=t.text,this.formButton.textContent="Save card",this.formButton.setAttribute("data-role","update"),this.editableCard=t)}deleteCard(t){confirm(`Are you sure, you want to delete ${t.title} card?`)&&this._request({method:"DELETE",card:t,isCreate:!1,message:"Card was deleted",callback:()=>{t.element.remove(),this._restartApp()}})}completeCard(t,e){e&&this._updateRequest(t)}}r.API_ENDPOINT="http://localhost:8080/api";class s{constructor({cardTitle:t="",cardText:e="",isImportance:s=!1,isDone:a=!1,id:i}){this.title=t,this.text=e,this.isImportance=s,this.isDone=a,this._id=i,this._init()}set id(t){this._id=t}get id(){return this._id}_init(){this.element=this._createElement(),this._attachEvents()}_attachEvents(){this._deleteButton.addEventListener("click",()=>{this._deleteCard()}),this._updateButton.addEventListener("click",()=>{this._updateCard()}),this._importanceCheckbox.addEventListener("change",()=>{this.isImportance=this._importanceCheckbox.checked,t.updateCard(this,!0),this.isImportance?this.element.classList.add("card--importance"):this.element.classList.remove("card--importance")}),this._doneCheckbox.addEventListener("change",()=>{this._completeCard()})}_updateCard(){this.titleElement.innerText=this.title,this.textElement.innerText=this.text,t.updateCard(this)}_deleteCard(){t.deleteCard(this)}_completeCard(){this.isDone=this._doneCheckbox.checked,t.completeCard(this,!0),this.isDone?(this.element.classList.add("card--done"),this._updateButton.disabled=!0,this._importanceCheckbox.disabled=!0):(this.element.classList.remove("card--done"),this._updateButton.disabled=!1,this._importanceCheckbox.disabled=!1)}_createElement(){var t=n({classes:["card"]}),e=(this.titleElement=n({tagName:"h5",classes:["card-title"],textContent:this.title}),this.textElement=n({tagName:"p",classes:["card-text"],textContent:this.text}),n({classes:["controls-container"]})),s=(this._updateButton=n({tagName:"button",textContent:"Update card",classes:["btn","btn-primary"]}),this._deleteButton=n({tagName:"button",textContent:"Delete card",classes:["btn","btn-primary"]}),this._importanceCheckbox=n({tagName:"input",classes:["form-check-input"],attributes:{type:"checkbox",id:"importanceCheckbox"}}),this.isImportance&&(this._importanceCheckbox.setAttribute("checked","checked"),t.classList.add("card--importance")),n({tagName:"label",classes:["form-check-label"],attributes:{for:"importanceCheckbox"},textContent:"Important"})),a=(this._doneCheckbox=n({tagName:"input",classes:["form-check-input"],attributes:{type:"checkbox",id:"doneCheckbox"}}),this.isDone&&(this._doneCheckbox.setAttribute("checked","checked"),t.classList.remove("card--importance"),t.classList.add("card--done"),this._updateButton.disabled=!0,this._importanceCheckbox.disabled=!0),n({tagName:"label",classes:["form-check-label"],attributes:{for:"doneCheckbox"},textContent:"Done"}));return e.append(this._updateButton,this._deleteButton,this._importanceCheckbox,s,this._doneCheckbox,a),t.append(this.titleElement,this.textElement,e),t}}let t=new r}();